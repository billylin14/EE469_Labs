//wrEn = regWE
module pipeline_registers(
						input logic wrEn, clk, reset,
						input logic inUncondBr, inBrTaken, //control signals to PCIncrementor
						input logic inReg2Loc, inRegWrite, inMemWrite, inwrByte, inMemToReg, inimmSel, inALUsrc, inKZsel, inMOVsel, insetFlag, inload,//control signals to datapath
						input logic [4:0] 	inRn, inRm, inRd, //register
						input logic [2:0] 	inALUop,
						input logic [11:0] 	inimm12,
						input logic [15:0] 	inimm16,
						input logic [8:0]	inDAddr9,
						input logic [18:0] 	inCondAddr19,
						input logic [25:0] 	inBrAddr26,
						input logic [3:0]	inLDURBsel,
						input logic [1:0] 	inSHAMT
						output logic outUncondBr, outBrTaken, //control signals to PCIncrementor
						output logic outReg2Loc, outRegWrite, outMemWrite, outwrByte, outMemToReg, outimmSel, outALUsrc, outKZsel, outMOVsel, outsetFlag, outload,//control signals to datapath
						output logic [4:0] 	outRn, outRm, outRd, //register
						output logic [2:0] 	outALUop,
						output logic [11:0] 	outimm12,
						output logic [15:0] 	outimm16,
						output logic [8:0]	outDAddr9,
						output logic [18:0] 	outCondAddr19,
						output logic [25:0] 	outBrAddr26,
						output logic [3:0]	outLDURBsel,
						output logic [1:0] 	outSHAMT);
						
	register uncondBr #(1) (.wrData(inUncondBr), .dOut(outUncondBr), .reset, .clk, .wrEn);
	register brTaken #(1) (.wrData, .dOut, .reset, .clk, .wrEn);